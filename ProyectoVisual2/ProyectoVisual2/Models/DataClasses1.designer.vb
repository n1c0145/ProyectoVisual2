'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="inventariovisual")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertRegistro(instance As Registro)
    End Sub
  Partial Private Sub UpdateRegistro(instance As Registro)
    End Sub
  Partial Private Sub DeleteRegistro(instance As Registro)
    End Sub
  Partial Private Sub InsertUsuarioLogin(instance As UsuarioLogin)
    End Sub
  Partial Private Sub UpdateUsuarioLogin(instance As UsuarioLogin)
    End Sub
  Partial Private Sub DeleteUsuarioLogin(instance As UsuarioLogin)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("inventariovisualConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Registro() As System.Data.Linq.Table(Of Registro)
		Get
			Return Me.GetTable(Of Registro)
		End Get
	End Property
	
	Public ReadOnly Property UsuarioLogin() As System.Data.Linq.Table(Of UsuarioLogin)
		Get
			Return Me.GetTable(Of UsuarioLogin)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Registro")>  _
Partial Public Class Registro
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdPersona As Integer
	
	Private _nombre As String
	
	Private _apellido As String
	
	Private _correo As String
	
	Private _direccion As String
	
	Private _telefono As System.Nullable(Of Integer)
	
	Private _IdLogin As System.Nullable(Of Integer)
	
	Private _UsuarioLogin As EntityRef(Of UsuarioLogin)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdPersonaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdPersonaChanged()
    End Sub
    Partial Private Sub OnnombreChanging(value As String)
    End Sub
    Partial Private Sub OnnombreChanged()
    End Sub
    Partial Private Sub OnapellidoChanging(value As String)
    End Sub
    Partial Private Sub OnapellidoChanged()
    End Sub
    Partial Private Sub OncorreoChanging(value As String)
    End Sub
    Partial Private Sub OncorreoChanged()
    End Sub
    Partial Private Sub OndireccionChanging(value As String)
    End Sub
    Partial Private Sub OndireccionChanged()
    End Sub
    Partial Private Sub OntelefonoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntelefonoChanged()
    End Sub
    Partial Private Sub OnIdLoginChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdLoginChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UsuarioLogin = CType(Nothing, EntityRef(Of UsuarioLogin))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPersona", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdPersona() As Integer
		Get
			Return Me._IdPersona
		End Get
		Set
			If ((Me._IdPersona = value)  _
						= false) Then
				Me.OnIdPersonaChanging(value)
				Me.SendPropertyChanging
				Me._IdPersona = value
				Me.SendPropertyChanged("IdPersona")
				Me.OnIdPersonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre", DbType:="VarChar(255)")>  _
	Public Property nombre() As String
		Get
			Return Me._nombre
		End Get
		Set
			If (String.Equals(Me._nombre, value) = false) Then
				Me.OnnombreChanging(value)
				Me.SendPropertyChanging
				Me._nombre = value
				Me.SendPropertyChanged("nombre")
				Me.OnnombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_apellido", DbType:="VarChar(255)")>  _
	Public Property apellido() As String
		Get
			Return Me._apellido
		End Get
		Set
			If (String.Equals(Me._apellido, value) = false) Then
				Me.OnapellidoChanging(value)
				Me.SendPropertyChanging
				Me._apellido = value
				Me.SendPropertyChanged("apellido")
				Me.OnapellidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_correo", DbType:="VarChar(255)")>  _
	Public Property correo() As String
		Get
			Return Me._correo
		End Get
		Set
			If (String.Equals(Me._correo, value) = false) Then
				Me.OncorreoChanging(value)
				Me.SendPropertyChanging
				Me._correo = value
				Me.SendPropertyChanged("correo")
				Me.OncorreoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_direccion", DbType:="VarChar(255)")>  _
	Public Property direccion() As String
		Get
			Return Me._direccion
		End Get
		Set
			If (String.Equals(Me._direccion, value) = false) Then
				Me.OndireccionChanging(value)
				Me.SendPropertyChanging
				Me._direccion = value
				Me.SendPropertyChanged("direccion")
				Me.OndireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_telefono", DbType:="Int")>  _
	Public Property telefono() As System.Nullable(Of Integer)
		Get
			Return Me._telefono
		End Get
		Set
			If (Me._telefono.Equals(value) = false) Then
				Me.OntelefonoChanging(value)
				Me.SendPropertyChanging
				Me._telefono = value
				Me.SendPropertyChanged("telefono")
				Me.OntelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdLogin", DbType:="Int")>  _
	Public Property IdLogin() As System.Nullable(Of Integer)
		Get
			Return Me._IdLogin
		End Get
		Set
			If (Me._IdLogin.Equals(value) = false) Then
				If Me._UsuarioLogin.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdLoginChanging(value)
				Me.SendPropertyChanging
				Me._IdLogin = value
				Me.SendPropertyChanged("IdLogin")
				Me.OnIdLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UsuarioLogin_Registro", Storage:="_UsuarioLogin", ThisKey:="IdLogin", OtherKey:="IdLogin", IsForeignKey:=true)>  _
	Public Property UsuarioLogin() As UsuarioLogin
		Get
			Return Me._UsuarioLogin.Entity
		End Get
		Set
			Dim previousValue As UsuarioLogin = Me._UsuarioLogin.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UsuarioLogin.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UsuarioLogin.Entity = Nothing
					previousValue.Registro.Remove(Me)
				End If
				Me._UsuarioLogin.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Registro.Add(Me)
					Me._IdLogin = value.IdLogin
				Else
					Me._IdLogin = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("UsuarioLogin")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UsuarioLogin")>  _
Partial Public Class UsuarioLogin
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdLogin As Integer
	
	Private _usuario As String
	
	Private _contrasenia As String
	
	Private _tipousuario As String
	
	Private _Registro As EntitySet(Of Registro)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdLoginChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdLoginChanged()
    End Sub
    Partial Private Sub OnusuarioChanging(value As String)
    End Sub
    Partial Private Sub OnusuarioChanged()
    End Sub
    Partial Private Sub OncontraseniaChanging(value As String)
    End Sub
    Partial Private Sub OncontraseniaChanged()
    End Sub
    Partial Private Sub OntipousuarioChanging(value As String)
    End Sub
    Partial Private Sub OntipousuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Registro = New EntitySet(Of Registro)(AddressOf Me.attach_Registro, AddressOf Me.detach_Registro)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdLogin", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdLogin() As Integer
		Get
			Return Me._IdLogin
		End Get
		Set
			If ((Me._IdLogin = value)  _
						= false) Then
				Me.OnIdLoginChanging(value)
				Me.SendPropertyChanging
				Me._IdLogin = value
				Me.SendPropertyChanged("IdLogin")
				Me.OnIdLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usuario", DbType:="VarChar(255)")>  _
	Public Property usuario() As String
		Get
			Return Me._usuario
		End Get
		Set
			If (String.Equals(Me._usuario, value) = false) Then
				Me.OnusuarioChanging(value)
				Me.SendPropertyChanging
				Me._usuario = value
				Me.SendPropertyChanged("usuario")
				Me.OnusuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contrasenia", DbType:="VarChar(255)")>  _
	Public Property contrasenia() As String
		Get
			Return Me._contrasenia
		End Get
		Set
			If (String.Equals(Me._contrasenia, value) = false) Then
				Me.OncontraseniaChanging(value)
				Me.SendPropertyChanging
				Me._contrasenia = value
				Me.SendPropertyChanged("contrasenia")
				Me.OncontraseniaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipousuario", DbType:="VarChar(255)")>  _
	Public Property tipousuario() As String
		Get
			Return Me._tipousuario
		End Get
		Set
			If (String.Equals(Me._tipousuario, value) = false) Then
				Me.OntipousuarioChanging(value)
				Me.SendPropertyChanging
				Me._tipousuario = value
				Me.SendPropertyChanged("tipousuario")
				Me.OntipousuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UsuarioLogin_Registro", Storage:="_Registro", ThisKey:="IdLogin", OtherKey:="IdLogin")>  _
	Public Property Registro() As EntitySet(Of Registro)
		Get
			Return Me._Registro
		End Get
		Set
			Me._Registro.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Registro(ByVal entity As Registro)
		Me.SendPropertyChanging
		entity.UsuarioLogin = Me
	End Sub
	
	Private Sub detach_Registro(ByVal entity As Registro)
		Me.SendPropertyChanging
		entity.UsuarioLogin = Nothing
	End Sub
End Class
